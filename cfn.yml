AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Fargate with XRAY implementation
Parameters:
  ServiceName:
    Type: String
    Default: xray-test
    Description: A name for the service
  Subnet:
    Type: String
    Default: subnet-9a2902ee
    Description: "subnet-id"

Resources:

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: # The Trust Relationship
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                # xray
                - 'xray:PutTraceSegments'
                - 'xray:PutTelemetryRecords'
                - 'xray:GetSamplingRules'
                - 'xray:GetSamplingTargets'
                - 'xray:GetSamplingStatisticSummaries'
                # sqs
                - 'sqs:*'
              Resource: '*'  

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ServiceName}


  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: "app"
          DependsOn:
            - Condition: START
              ContainerName: "mysql"
            - Condition: START
              ContainerName: "xray-daemon"
          Image: !Join
            - '.'
            - - !Ref 'AWS::AccountId'
              - "dkr.ecr"
              - !Ref 'AWS::Region'
              - "amazonaws.com/xray-app"
          Environment:
            - Name: "ENVIRONMENT"
              Value: "production"
            - Name: "XRAY_APP_NAME"
              Value: "cloud-xray-test"
            - Name: "XRAY_DAEMON_ADDR"
              Value: "localhost:2000"
            - Name: "MYSQL_ADDR"
              Value: "localhost"
            - Name: "SQS_QUEUE_URL"
              Value: !Ref MySQS
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub /ecs/${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
        - Name: "mysql"
          Image: !Join
            - '.'
            - - !Ref 'AWS::AccountId'
              - "dkr.ecr"
              - !Ref 'AWS::Region'
              - "amazonaws.com/xray-mariadb:10.5.3"
          Environment:
            - Name: "MYSQL_ROOT_PASSWORD"
              Value: "root"
            - Name: "MYSQL_DATABASE"
              Value: "xray"
          PortMappings:
            - ContainerPort: 3306
              Protocol: tcp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub /ecs/${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
        - Name: "xray-daemon"
          Memory: 256
          Cpu: 32
          Image: !Join
            - '.'
            - - !Ref 'AWS::AccountId'
              - "dkr.ecr"
              - !Ref 'AWS::Region'
              - "amazonaws.com/aws-xray-daemon"
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub /ecs/${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'


  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 'ContainerSecurityGroup.GroupId'
          Subnets:
            - !Ref 'Subnet'
      TaskDefinition: !Ref 'TaskDefinition'           

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ServiceName}

  MySQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref ServiceName
